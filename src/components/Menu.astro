---
interface Props {
  align?: "end" | "default";
  class?: string;
  disableMobile?: boolean;
}

const { align = "end", class: classNames, disableMobile = false, ...rest } = Astro.props;
const baseUrl = import.meta.env.SITE;
---

<nav class:list={[{ "-end": align === "end" }, classNames]} {...rest}>
  <ul>
    <li><a href={`${baseUrl}#about`}>About</a></li>
    <li><a href={`${baseUrl}#tech`}>Skills</a></li>
    <li><a href={`${baseUrl}#projects`}>Projects</a></li>
    <li><a href={`${baseUrl}#contacts`}>Contacts</a></li>
  </ul>
</nav>
{
  disableMobile ? (
    <Fragment />
  ) : (
    <>
      <label for="menu-toggle"> Menu</label>
      <input id="menu-toggle" class="menu-toggle" type="checkbox" />
      <nav data-mobile class="m-menu">
        <ul class="m-links">
          <li>
            <a href={`${baseUrl}#about`}>About</a>
          </li>
          <li>
            <a href={`${baseUrl}#tech`}>Skills</a>
          </li>
          <li>
            <a href={`${baseUrl}#projects`}>Projects</a>
          </li>
          <li>
            <a href={`${baseUrl}#contacts`}>Contacts</a>
          </li>
        </ul>
        <slot />
      </nav>
    </>
  )
}
<style lang="scss">
  @use "styles.scss" as utils;

  nav {
    display: inline-flex;
    flex: 1 1 0;

    &.-end {
      justify-content: flex-end;
    }

    @include utils.tablet {
      display: none;
    }
  }

  ul {
    display: flex;
    align-items: center;
    list-style: none;
    padding: 0;
    @include utils.font(caption, m);

    @include utils.mobile {
      flex-direction: column;
      margin: 0;
    }
  }

  li {
    color: utils.text-color(secondary);
    @include utils.skipIfNoMotionPrefered() {
      transition: color 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    &:hover {
      // TODO underline with animation
      color: utils.text-color(secondary-hover);
    }

    + li {
      margin-left: 2.5rem;

      @include utils.mobile {
        margin-left: 0;
      }
    }

    @include utils.mobile {
      margin-left: 0;
      margin-bottom: 1em;
    }
  }

  a {
    text-decoration: none;
  }

  .hidden {
    display: none;
    overflow-x: scroll;
  }

  label {
    display: none;
    order: 3;
    @include utils.font(caption, s);

    // &,
    // &:before,
    // &:after {
    //   content: "";
    //   width: 100%;
    //   height: 6px;
    //   background-color: utils.color(main);
    // }

    @include utils.tablet {
      display: flex;
      flex: 1;
      justify-content: flex-end;
    }

    .menu-toggle:checked ~ & {
      box-shadow: 1px 1px 0 0 utils.color(secondary);
    }
  }

  .menu-toggle {
    display: none;
  }

  .m-menu {
    display: none;
    top: 0;
    left: 0;

    .menu-toggle:checked ~ & {
      display: flex;
      flex-direction: column;
      position: absolute;
      align-items: flex-end;
      @include utils.contentMaxWidth();
      box-shadow: 7px 11px 10px 0px utils.color(main, 0.3);
      transform: translateY(var(--header-height));
      transition: transform 5s ease-out;
      // background: linear-gradient(-90deg, utils.color(light) 60%, transparent);
      background: utils.color(light);

      @include utils.tablet {
        padding-bottom: 1.2em;
      }

      :global(.is-pinned) & {
        background: utils.color(light, 0.8);
      }

      @include utils.mediaBreakpointAfter(m) {
        display: none;
      }
    }
  }

  .m-links {
    align-items: flex-end;
  }
</style>

<script>
  const mobileMenuToggle = document.querySelector(".menu-toggle") as HTMLInputElement;
  mobileMenuToggle.addEventListener("change", () => {
    if (mobileMenuToggle.checked) {
      document.addEventListener("click", (event) => {
        if (mobileMenuToggle && event.target !== mobileMenuToggle) {
          mobileMenuToggle.checked = false;
        }
      });
    }
  });
  // mobile menu close outside
</script>
