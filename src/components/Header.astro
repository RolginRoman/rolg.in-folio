---
import Logo from "./Logo.astro";
import Networks from "./Networks.astro";
import Menu from "./Menu.astro";
import ThemeToggle from "./ThemeToggle.astro";

interface Props {
  disableInteractions?: boolean;
}

const { disableInteractions = false } = Astro.props;
---

<header data-interactive={!disableInteractions}>
  <section>
    <Logo width={52} />
    <Menu />
    <Networks />
    <i class="separator"></i>
    <ThemeToggle />
  </section>
</header>
<style lang="scss">
  @use "styles.scss" as utils;

  @keyframes appear {
    0% {
      transform: translateY(-200%);
    }

    30% {
      opacity: 1;
    }

    // 70% {
    // transform: translateY(10%);
    // }

    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  header {
    display: flex;
    align-items: center;
    opacity: 0;
    position: sticky;
    z-index: 1;
    top: -1px;
    background-color: utils.color(light);

    &.is-pinned {
      background-color: utils.color(light, 0.7);
    }

    &.anim {
      animation: appear 0.4s cubic-bezier(0, 0.78, 0.67, 0.84) forwards;

      @include utils.onlyIfNoMotionPrefered() {
        animation: none;
      }
    }

    &:not([data-interactive]) {
      opacity: 1;
    }

    @include utils.onlyIfNoMotionPrefered() {
      opacity: 1;
    }
  }

  section {
    display: flex;
    align-items: center;
    justify-content: space-between;
    @include utils.contentMaxWidth();
    color: utils.text-color(secondary);
    transition: color 0.1s cubic-bezier(0.215, 0.61, 0.355, 1);

    &:hover {
      color: utils.text-color(main);
    }
  }

  .separator {
    height: 2rem;
    margin: 0 1.5rem;
    border-right: 2px solid utils.color(secondary);

    @include utils.withDark() {
      border-right: 2px solid utils.text-color(secondary);
    }
  }
</style>

<script>
  import { matchReducedMotion } from "../js/media.service";
  let deleteSubscriptions = () => {};
  const header = document.querySelector("header");

  const handleReducedMotion = (isMatches: boolean) => {
    if (isMatches) {
      deleteSubscriptions();
    } else {
      const events = ["scroll", "pointerdown", "keydown"];
      const body = document.querySelector("body");
      let observer: IntersectionObserver;
      if (header && body) {
        observer = new IntersectionObserver(
          ([e]) => {
            const isPinned = e.intersectionRatio < 1;
            e.target.classList.toggle("is-pinned", isPinned);
            body.classList.toggle("pinned", isPinned);
          },
          { threshold: [1] }
        );
        observer.observe(header);
      }

      const handleEvent = (event: Event) => {
        event.preventDefault();
        event.stopPropagation();
        header?.classList.add("anim");
      };

      events.forEach((event) => {
        window.addEventListener(event, handleEvent, { once: true });
      });

      deleteSubscriptions = () => {
        if (header) {
          observer?.unobserve(header);
        }
        events.forEach((event) => window.removeEventListener(event, handleEvent));
      };
    }
  };

  if (header?.dataset["interactive"] !== undefined) {
    matchReducedMotion(handleReducedMotion);
  }
</script>
