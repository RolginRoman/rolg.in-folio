---
interface Props {
  align?: "end" | "default";
  class?: string;
  disableMobile?: boolean;
}

const { align = "end", class: classNames, disableMobile = false, ...rest } = Astro.props;
const baseUrl = import.meta.env.BASE_URL;
---

<nav class:list={[{ "-end": align === "end" }, classNames]} {...rest} aria-labelledby="mobile-menu">
  <ul class="l-nav">
    <li><a href={`${baseUrl}#about`}>About</a></li>
    <li><a href={`${baseUrl}#tech`}>Skills</a></li>
    <li><a href={`${baseUrl}#projects`}>Projects</a></li>
    <li><a href={`${baseUrl}#contacts`}>Contacts</a></li>
  </ul>
  {
    disableMobile ? (
      <Fragment />
    ) : (
      <div class="menu-wrap">
        <button
          id="mobile-menu"
          class="mobile-menu"
          type="button"
          aria-controls="navigation"
          aria-label="Show Navigation Menu"
        >
          <span class="mobile-menu-box">
            <span class="mobile-menu-inner" />
          </span>
          Menu
        </button>

        <div id="navigation" data-mobile class="m-menu">
          <ul class="m-links">
            <li>
              <a href={`${baseUrl}#about`}>About</a>
            </li>
            <li>
              <a href={`${baseUrl}#tech`}>Skills</a>
            </li>
            <li>
              <a href={`${baseUrl}#projects`}>Projects</a>
            </li>
            <li>
              <a href={`${baseUrl}#contacts`}>Contacts</a>
            </li>
          </ul>
          <slot />
        </div>
      </div>
    )
  }
</nav>
<style lang="scss">
  @use "styles.scss" as utils;

  nav {
    display: inline-flex;
    flex: 1 1 0;

    &.-end {
      justify-content: flex-end;
    }
  }

  .l-nav {
    @include utils.tablet {
      display: none;
    }
  }

  ul {
    display: flex;
    align-items: center;
    list-style: none;
    padding: 0;
    @include utils.font(caption, s);

    @include utils.tablet {
      @include utils.font(caption, m);
    }

    @include utils.mobile {
      flex-direction: column;
      margin: 0;
    }
  }

  li {
    color: utils.text-color(secondary);

    @include utils.skipIfNoMotionPrefered() {
      transition: color 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    &:hover {
      // TODO underline with animation
      color: utils.text-color(secondary-hover);
    }

    + li {
      margin-left: 2.5rem;

      @include utils.mobile {
        margin-left: 0;
      }
    }

    @include utils.mobile {
      margin-left: 0;
      margin-bottom: 1em;
    }
  }

  a {
    text-decoration: none;
  }

  .hidden {
    display: none;
    overflow-x: scroll;
  }

  .menu-wrap {
    display: none;
    order: 3;
    @include utils.font(caption, m);
    user-select: none;

    @include utils.tablet {
      display: flex;
      flex: 1;
      justify-content: flex-end;
      align-items: center;
    }
  }

  label {
    cursor: pointer;
    @include utils.font(caption, s);

    .menu-toggle:checked ~ &,
    .hamburger.is-active ~ & {
      color: utils.color(accent);
    }

    & {
      span {
        padding: 0.5em 0 0.5em 0.2em;
      }
    }
  }

  .menu-toggle {
    display: none;
  }

  @keyframes openMenu {
    0% {
      opacity: 0;
      transform: translateY(-100%);
    }

    50% {
      opacity: 1;
      transform: translateY(-50%);
    }

    100% {
      opacity: 1;
      transform: translateY(var(--header-height));
    }
  }

  .m-menu {
    opacity: 0;
    position: absolute;
    visibility: hidden;
    top: 0;
    right: 0;
    display: flex;
    align-items: flex-end;
    flex-direction: column;
    @include utils.contentMaxWidth();
    background: utils.color(light);
    box-shadow: 7px 11px 10px 0px utils.color(main, 0.3);

    @include utils.skipIfNoMotionPrefered {
    }

    transform: translateY(-200%);

    .menu-toggle:checked ~ &,
    .mobile-menu.is-active ~ & {
      opacity: 1;
      visibility: visible;
      transform: translateY(var(--header-height));
      @include utils.tablet {
        padding-bottom: 1.2em;
      }

      :global(.is-pinned) & {
        background: utils.color(light, 0.8);
      }

      @include utils.mediaBreakpointAfter(m) {
        display: none;
      }
    }
  }

  .m-links {
    align-items: flex-end;
  }
</style>

<script>
  const menuWrap = document.querySelector(".menu-wrap");
  const mobileMenuButton = document.querySelector(".mobile-menu");
  const close = () => {
    mobileMenuButton?.classList.remove("is-active");
    mobileMenuButton?.removeAttribute("aria-expanded");
  };
  const open = () => {
    mobileMenuButton?.classList.add("is-active");
    mobileMenuButton?.setAttribute("aria-expanded", "true");
  };
  const checkClickedOutside = (event: Event) => {
    const target = event.target as Node;
    if (mobileMenuButton && !menuWrap?.contains(target)) {
      close();
      document.removeEventListener("click", checkClickedOutside, { capture: true });
    }
    document.addEventListener(
      "keyup",
      function (event) {
        if (event.code === "Escape") {
          close();
        }
      },
      false
    );
  };

  mobileMenuButton?.addEventListener("click", () => {
    const openedMenu = mobileMenuButton.classList.contains("is-active");
    if (openedMenu) {
      close();
      document.removeEventListener("click", checkClickedOutside, { capture: true });
    } else {
      open();
      document.addEventListener("click", checkClickedOutside, { capture: true });
    }
  });
</script>
