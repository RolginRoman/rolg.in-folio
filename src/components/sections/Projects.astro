---
import { Icon } from "astro-icon";
import { links } from "src/const";
import ProjectCard from "../blocks/ProjectCard.astro";

const { class: classNames, ...rest } = Astro.props;
const projects = [
  {
    projectName: "rtech / plugins",
    svg: "logo",
    description: "Astro plugins with Nx monorepo support",
    githubLink: links.projects.rtech,
    classNames: "-plug",
    optimize: true,
  },
  {
    projectName: "wavepulse",
    imageUrl: "https://raw.githubusercontent.com/RolginRoman/wavepulse/main/static/logo.svg",
    svg: "wavepulse:logo",
    description: "Chat app with the power of Qwik & Centrifuge",
    githubLink: links.projects.wavepulse,
    classNames: "-wave",
    optimize: true,
  },
  {
    projectName: "rolg.in-folio",
    svg: "logo-glitch",
    description: "This website ðŸ‘½",
    classNames: "-folio",
    githubLink: links.projects.rolginfolio,
    optimize: false,
  },
];
---

<section class="projects" {...rest}>
  <h2>Projects</h2><h3>Things I&rsquo;ve worked on&nbsp;in&nbsp;the recent past</h3>
  <article>
    <p>Experienced software engineer with 8+&nbsp;years in&nbsp;web development.</p>
    <p>
      Proficient in&nbsp;Angular, TypeScript, system architecture. My&nbsp;true passion lies in&nbsp;creating
      user-centric designs, optimizing&nbsp;UX, and driving business metrics through a&nbsp;combination
      of&nbsp;development expertise and effective people management.
    </p>
    <p>
      Exploring the realm of&nbsp;open-source software, eagerly anticipating personal growth and development
      in&nbsp;this domain.
    </p>
  </article>
  <ul class="projects-list">
    {
      projects.map(({ projectName, description, githubLink, imageUrl, classNames, svg, optimize }) => (
        <ProjectCard
          tabindex="0"
          tag="li"
          {projectName}
          {description}
          {githubLink}
          class={classNames ? classNames : ""}
        >
          {svg ? (
            <Icon
              slot="card-image"
              optimize={optimize}
              name={svg}
              alt={`Project ${projectName} Preview`}
              width="230"
              height="140"
              class:list={["image", classNames]}
            />
          ) : (
            <img
              slot="card-image"
              src={imageUrl}
              alt={`Project ${projectName} Preview`}
              width="230"
              height="140"
              class:list={["image", classNames]}
            />
          )}
        </ProjectCard>
      ))
    }
  </ul>
  <p class="spoiler">
    There are&nbsp;NDAs and stuff.<br /> However, my&nbsp;<a
      class="cv"
      href={links.cv}
      title="CV Link"
      target="_blank"
      rel="noreferrer noopener"
      aria-label="CV Link">CV &rarr;</a
    >
    contains all the relevant details regarding my experience and accomplishments.
  </p>
</section>
<style lang="scss">
  @use "styles.scss" as utils;
  @include utils.centerHeaders();

  .projects {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 3rem 0 0;
  }

  h2 {
    margin: 1rem 0 0;
    @include utils.font(heading, m);
    color: utils.text-color(main);
  }

  h3 {
    @include utils.font(text, m);
    color: utils.text-color(main);
    margin: 1rem 0 0;
  }

  article {
    @include utils.font(caption, m);
    color: utils.text-color(secondary);
    margin: 1rem 0;
    text-align: justify;
  }

  .spoiler {
    @include utils.font(caption, m);
    color: utils.text-color(secondary);
    margin: 1em 0 0;
    text-align: justify;
  }

  .projects-list {
    list-style: none;
    padding: 0;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;

    @include utils.tablet {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 16px;
    }

    @include utils.mobile {
      display: flex;
      flex-direction: column;
    }
  }

  .image {
    aspect-ratio: 16/9;
    width: 100%;
    height: auto;
    object-fit: cover;
    background-color: utils.color(secondary, 0.8);

    @include utils.tablet {
      grid-area: image;
    }

    @include utils.mobile {
      object-fit: fill;
      height: 100%;
    }

    &.-plug {
      color: utils.color(dark);
    }

    &.-wave {
    }

    &.-folio {
      --glitch-protocol-text-color: #{utils.text-color(secondary)};
      --glitch-text-color: #{utils.color(dark)};
      --glitch-text-primary-color: #{utils.color(ext-accent-secondary)};
      --glitch-text-secondary-color: #{utils.color(ext-accent-inverted)};
    }
  }

  .cv {
    text-decoration: underline;

    &:hover {
      color: utils.text-color(secondary-hover);
    }
  }
</style>
