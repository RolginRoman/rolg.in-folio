@use "sass:map";
@use "sass:string";
@use "palette.scss" as palette;

$_mainPalette: palette.$palette;
$_textPalette: palette.$text;

@function _getCssVarFromMap($color-map, $colorName, $prefix) {
  @if (map.has-key($color-map, $colorName)) {
    @return $prefix + $colorName;
  } @else {
    @error "`#{$colorName}` isn't a valid key in `#{$prefix}`";
  }
}

@function _paletteCssVarName($colorName) {
  @return _getCssVarFromMap(
    map.get($_mainPalette, light),
    $colorName,
    "palette-"
  );
}

@function _textColorCssVarName($colorName) {
  @return _getCssVarFromMap(
    map.get($_textPalette, light),
    $colorName,
    "text-color-"
  );
}

@mixin _applyThemePalette($theme) {
  // TODO merge with additional map for text styles
  // https://sass-lang.com/documentation/modules/color
  @each $paletteColorName, $color in map.get($_mainPalette, $theme) {
    $colorName: _paletteCssVarName($paletteColorName);
    --#{$colorName}: #{$color};
  }
  @each $textColorName, $color in map.get($_textPalette, $theme) {
    $colorName: _textColorCssVarName($textColorName);
    --#{$colorName}: #{$color};
  }
}

@mixin applyPalette() {
  @include _applyThemePalette(light);

  @at-root.dark {
    @include _applyThemePalette(dark);
  }
}

@mixin withDark() {
  :global(.dark) & {
    @content;
  }
}

@function color($colorName) {
  @return var(string.unquote("--" + _paletteCssVarName($colorName)));
}

@function text-color($colorName) {
  @return var(string.unquote("--" + _textColorCssVarName($colorName)));
}
